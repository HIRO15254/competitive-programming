pyram_ave = [
    [0],
    [2, 3],
    [3, 13, 5],
    [5, 21, 22, 7],
    [7, 27, 34, 29, 10],
    [9, 32, 45, 47, 35, 12],
    [11, 36, 54, 61, 57, 42, 15],
    [13, 41, 62, 72, 74, 66, 50, 18],
    [15, 45, 68, 83, 89, 87, 76, 56, 21],
    [17, 49, 75, 91, 101, 103, 101, 86, 62, 25],
    [19, 54, 81, 100, 113, 118, 118, 112, 95, 68, 29],
    [21, 58, 87, 107, 123, 132, 135, 133, 124, 103, 73, 33],
    [24, 62, 93, 116, 133, 144, 151, 151, 146, 135, 112, 80, 36],
    [27, 68, 100, 124, 143, 157, 165, 168, 167, 160, 146, 121, 87, 40],
    [30, 73, 106, 133, 153, 167, 179, 184, 188, 184, 174, 156, 130, 94, 44],
    [33, 79, 113, 142, 162, 178, 191, 199, 205, 204, 199, 189, 167, 139, 103, 48],
    [37, 86, 122, 150, 171, 190, 203, 213, 219, 222, 221, 212, 200, 178, 149, 110, 53],
    [41, 93, 130, 159, 181, 201, 216, 227, 234, 238, 239, 235, 227, 211, 189, 161, 119, 59],
    [47, 100, 140, 170, 192, 212, 228, 240, 249, 253, 258, 254, 249, 240, 224, 202, 170, 127, 65],
    [52, 110, 149, 179, 203, 223, 242, 254, 262, 270, 273, 274, 269, 265, 255, 236, 216, 183, 136, 74],
    [59, 120, 160, 191, 216, 237, 254, 268, 278, 285, 288, 291, 290, 285, 279, 268, 253, 229, 195, 147, 84],
    [67, 130, 172, 204, 229, 249, 267, 282, 292, 303, 308, 310, 309, 308, 302, 294, 283, 268, 241, 207, 160, 92],
    [76, 142, 186, 221, 245, 264, 282, 297, 309, 315, 325, 327, 330, 328, 325, 318, 310, 299, 282, 258, 222, 172, 103],
    [89, 157, 202, 238, 263, 283, 301, 312, 322, 331, 340, 345, 346, 348, 345, 341, 337, 328, 313, 298, 273, 238, 188, 115],
    [102, 178, 225, 258, 283, 301, 319, 329, 340, 348, 355, 360, 366, 365, 365, 362, 357, 352, 344, 330, 314, 293, 259, 206, 130],
    [121, 201, 249, 283, 305, 321, 337, 348, 357, 363, 373, 376, 381, 384, 385, 382, 380, 375, 369, 361, 350, 335, 317, 279, 226, 147],
    [143, 226, 279, 311, 330, 348, 356, 364, 376, 384, 390, 394, 398, 403, 403, 400, 400, 397, 392, 385, 379, 367, 357, 336, 304, 257, 176],
    [178, 267, 317, 342, 358, 377, 382, 389, 398, 402, 408, 413, 415, 420, 419, 419, 419, 416, 415, 410, 407, 398, 389, 382, 360, 334, 296, 217],
    [235, 311, 362, 381, 394, 403, 412, 415, 419, 424, 429, 431, 434, 434, 436, 436, 436, 436, 434, 432, 431, 426, 420, 416, 411, 397, 374, 343, 276],
    [342, 389, 415, 429, 433, 439, 441, 442, 446, 445, 448, 450, 451, 452, 452, 453, 453, 453, 454, 453, 451, 450, 447, 444, 442, 440, 429, 426, 402, 362]
]


def solve(pyramid):
    ans = []
    ans_len = 0

    def swap(x1, y1, x2, y2):
        ans.append((x1, y1, x2, y2))
        pyramid[x1][y1], pyramid[x2][y2] = pyramid[x2][y2], pyramid[x1][y1]

    def diff(x1, y1):
        if x1 < 0 or x1 > 29 or y1 < 0 or y1 > x1:
            return 0
        return pyramid[x1][y1] - pyram_ave[x1][y1]

    def swap_diff(x1, y1, x2, y2):
        if x1 < 0 or x1 > 29 or y1 < 0 or y1 > x1 or x2 < 0 or x2 > 29 or y2 < 0 or y2 > x2:
            return 0
        before = abs(diff(x1, y1)) ** 2 + abs(diff(x2, y2)) ** 2
        after = abs(pyramid[x1][y1] - pyram_ave[x2][y2]) ** 2 + abs(pyramid[x2][y2] - pyram_ave[x1][y1]) ** 2
        return before - after

    for i in range(435):
        for j in range(29):
            for k in range(j + 1):
                if abs(diff(j, k)) > 435 - i:
                    swapdiff_right_down = swap_diff(j, k, j + 1, k + 1)
                    swapdiff_left_down = swap_diff(j, k, j + 1, k)
                    swapdiff_max = max(swapdiff_right_down, swapdiff_left_down)
                    if swapdiff_max > 0:
                        if swapdiff_max == swapdiff_right_down:
                            swap(j, k, j + 1, k + 1)
                        elif swapdiff_max == swapdiff_left_down:
                            swap(j, k, j + 1, k)
                        ans_len += 1
        if ans_len > 1000:
            break


    for i in range(29):
        for j in range(29):
            for k in range(j + 1):
                top = pyramid[j][k]
                bottom_1 = pyramid[j + 1][k]
                bottom_2 = pyramid[j + 1][k + 1]
                if top < bottom_1 and top < bottom_2:
                    continue
                elif bottom_1 < bottom_2:
                    swap(j, k, j + 1, k)
                    ans_len += 1
                else:
                    swap(j, k, j + 1, k + 1)
                    ans_len += 1

    return ans


pyramid = []
for i in range(30):
    b = list(map(int, input().split()))
    pyramid.append(b)
ans = solve(pyramid)

print(len(ans))
for i in ans:
    print(i[0], i[1], i[2], i[3])
